{"version":3,"sources":["Animation.js","App.js","serviceWorker.js","index.js"],"names":["Animation","state","posX","posY","document","addEventListener","event","setNewPosition","removeEventListener","clientX","clientY","this","props","ratioX","ratioY","window","innerWidth","innerHeight","setState","className","src","style","transform","alt","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0PAoDeA,E,4MAjDbC,MAAQ,CACNC,KAAM,EACNC,KAAM,G,kEAGa,IAAD,OAClBC,SAASC,iBAAiB,aAAa,SAACC,GAAD,OACrC,EAAKC,eAAeD,Q,6CAIA,IAAD,OACrBF,SAASI,oBAAoB,aAAa,SAACF,GAAD,OACxC,EAAKC,eAAeD,Q,qCAITA,GAAQ,IACbG,EAAqBH,EAArBG,QAASC,EAAYJ,EAAZI,QADG,EAEOC,KAAKC,MAAxBC,EAFY,EAEZA,OAAQC,EAFI,EAEJA,OAIVZ,EAAOO,EAHGM,OAAOC,WAAa,EAI9Bb,EAAOO,EAHGK,OAAOE,YAAc,EAKrCN,KAAKO,SAAS,CACZhB,KAAMA,GAAQW,EACdV,KAAMA,GAAQW,M,+BAIR,IAAD,EACoBH,KAAKC,MAAxBO,EADD,EACCA,UAAWC,EADZ,EACYA,IADZ,EAEgBT,KAAKV,MAApBC,EAFD,EAECA,KAAMC,EAFP,EAEOA,KAEd,OACE,yBACEgB,UAAWA,EACXC,IAAKA,EACLC,MAAO,CACLC,UAAU,aAAD,OAAepB,EAAf,eAA0BC,EAA1B,QAEXoB,IAAI,S,GA5CYC,aC8CTC,MA5Cf,WACE,OACE,yBAAKN,UAAU,yBACb,kBAAC,EAAD,CACEA,UAAU,eACVC,IAAI,cACJP,OAAO,MACPC,OAAO,SAET,kBAAC,EAAD,CACEK,UAAU,eACVC,IAAI,cACJP,OAAO,OACPC,OAAO,SAET,kBAAC,EAAD,CACEK,UAAU,eACVC,IAAI,cACJP,OAAO,MACPC,OAAO,SAET,kBAAC,EAAD,CACEK,UAAU,eACVC,IAAI,cACJP,OAAO,OACPC,OAAO,SAET,kBAAC,EAAD,CACEK,UAAU,eACVC,IAAI,cACJP,OAAO,OACPC,OAAO,SAGT,kBAAC,EAAD,CACEK,UAAU,iBACVC,IAAI,gBACJP,OAAO,OACPC,OAAO,UC9BKY,QACW,cAA7BX,OAAOY,SAASC,UAEe,UAA7Bb,OAAOY,SAASC,UAEhBb,OAAOY,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF5B,SAAS6B,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.4e567aa6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Animation extends Component {\r\n  state = {\r\n    posX: 0,\r\n    posY: 0,\r\n  };\r\n\r\n  componentDidMount() {\r\n    document.addEventListener(\"mousemove\", (event) =>\r\n      this.setNewPosition(event)\r\n    );\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener(\"mousemove\", (event) =>\r\n      this.setNewPosition(event)\r\n    );\r\n  }\r\n\r\n  setNewPosition(event) {\r\n    const { clientX, clientY } = event;\r\n    const { ratioX, ratioY } = this.props;\r\n    const centerX = window.innerWidth / 2;\r\n    const centerY = window.innerHeight / 2;\r\n\r\n    const posX = clientX - centerX;\r\n    const posY = clientY - centerY;\r\n\r\n    this.setState({\r\n      posX: posX * -ratioX,\r\n      posY: posY * -ratioY,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { className, src } = this.props;\r\n    const { posX, posY } = this.state;\r\n\r\n    return (\r\n      <img\r\n        className={className}\r\n        src={src}\r\n        style={{\r\n          transform: `translate(${posX}px, ${posY}px)`,\r\n        }}\r\n        alt=\"\"\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Animation;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Animation from \"./Animation\";\n\nfunction App() {\n  return (\n    <div className=\"App balloon-animation\">\n      <Animation\n        className=\"flying-cloud\"\n        src=\"\\cloud.png\"\n        ratioX=\"0.2\"\n        ratioY=\"0.23\"\n      />\n      <Animation\n        className=\"flying-cloud\"\n        src=\"\\cloud.png\"\n        ratioX=\"0.26\"\n        ratioY=\"0.34\"\n      />\n      <Animation\n        className=\"flying-cloud\"\n        src=\"\\cloud.png\"\n        ratioX=\"0.1\"\n        ratioY=\"0.11\"\n      />\n      <Animation\n        className=\"flying-cloud\"\n        src=\"\\cloud.png\"\n        ratioX=\"0.13\"\n        ratioY=\"0.53\"\n      />\n      <Animation\n        className=\"flying-cloud\"\n        src=\"\\cloud.png\"\n        ratioX=\"0.23\"\n        ratioY=\"0.41\"\n      />\n\n      <Animation\n        className=\"flying-balloon\"\n        src=\"\\balloon.png\"\n        ratioX=\"0.07\"\n        ratioY=\"0.3\"\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}